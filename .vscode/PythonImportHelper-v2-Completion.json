[
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "urllib.parse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "get_movie_names",
        "kind": 2,
        "importPath": "src.douban_list",
        "description": "src.douban_list",
        "peekOfCode": "def get_movie_names(url):\n    movie_titles = []\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()  # check response code\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        items = soup.find_all(\"div\", class_=\"item\")\n        for item in items:\n            title_tag = item.find(\"em\")\n            if title_tag:",
        "detail": "src.douban_list",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "src.douban_list",
        "description": "src.douban_list",
        "peekOfCode": "headers = {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\"\n}\nbase_url = \"https://movie.douban.com/people/236635934/wish\"\ndef get_movie_names(url):\n    movie_titles = []\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()  # check response code\n        soup = BeautifulSoup(response.text, \"html.parser\")",
        "detail": "src.douban_list",
        "documentation": {}
    },
    {
        "label": "base_url",
        "kind": 5,
        "importPath": "src.douban_list",
        "description": "src.douban_list",
        "peekOfCode": "base_url = \"https://movie.douban.com/people/236635934/wish\"\ndef get_movie_names(url):\n    movie_titles = []\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()  # check response code\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        items = soup.find_all(\"div\", class_=\"item\")\n        for item in items:\n            title_tag = item.find(\"em\")",
        "detail": "src.douban_list",
        "documentation": {}
    },
    {
        "label": "movies",
        "kind": 5,
        "importPath": "src.douban_list",
        "description": "src.douban_list",
        "peekOfCode": "movies = get_movie_names(base_url)\nmovies_stripped = [m.split(' ')[0] for m in movies]\noutput_file = \"movies_list.txt\"\nwith open(output_file, \"w\", encoding=\"utf-8\") as f:\n    if movies:\n        f.write(\"电影清单:\\n\")\n        for i, movie in enumerate(movies, 1):\n            f.write(f\"{i}. {movie}\\n\")\n        print(f\"Film list saved to: {output_file}\")\n    else:",
        "detail": "src.douban_list",
        "documentation": {}
    },
    {
        "label": "movies_stripped",
        "kind": 5,
        "importPath": "src.douban_list",
        "description": "src.douban_list",
        "peekOfCode": "movies_stripped = [m.split(' ')[0] for m in movies]\noutput_file = \"movies_list.txt\"\nwith open(output_file, \"w\", encoding=\"utf-8\") as f:\n    if movies:\n        f.write(\"电影清单:\\n\")\n        for i, movie in enumerate(movies, 1):\n            f.write(f\"{i}. {movie}\\n\")\n        print(f\"Film list saved to: {output_file}\")\n    else:\n        f.write(\"Failed\\n\")",
        "detail": "src.douban_list",
        "documentation": {}
    },
    {
        "label": "output_file",
        "kind": 5,
        "importPath": "src.douban_list",
        "description": "src.douban_list",
        "peekOfCode": "output_file = \"movies_list.txt\"\nwith open(output_file, \"w\", encoding=\"utf-8\") as f:\n    if movies:\n        f.write(\"电影清单:\\n\")\n        for i, movie in enumerate(movies, 1):\n            f.write(f\"{i}. {movie}\\n\")\n        print(f\"Film list saved to: {output_file}\")\n    else:\n        f.write(\"Failed\\n\")\n        print(f\"Failed\")",
        "detail": "src.douban_list",
        "documentation": {}
    },
    {
        "label": "output_file2",
        "kind": 5,
        "importPath": "src.douban_list",
        "description": "src.douban_list",
        "peekOfCode": "output_file2 = 'movies_list_stripped.txt'\nwith open(output_file2, \"w\", encoding=\"utf-8\") as f:\n    if movies_stripped:\n        for movie in movies_stripped:\n            f.write(f\"{movie}\\n\")\n        print(f\"Film list saved to: {output_file2}\")\n    else:\n        f.write(\"Failed\\n\")\n        print(f\"Failed\")",
        "detail": "src.douban_list",
        "documentation": {}
    },
    {
        "label": "read_movie_list",
        "kind": 2,
        "importPath": "src.iyf_search",
        "description": "src.iyf_search",
        "peekOfCode": "def read_movie_list(file_path):\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            movies = [line.strip() for line in f if line.strip()]\n        return movies\n    except FileNotFoundError:\n        print(f\"Error: File '{file_path}' not found.\")\n        return []\n# Function to check if a movie has valid search results using Selenium\ndef check_movie_results_selenium(movie_name):",
        "detail": "src.iyf_search",
        "documentation": {}
    },
    {
        "label": "check_movie_results_selenium",
        "kind": 2,
        "importPath": "src.iyf_search",
        "description": "src.iyf_search",
        "peekOfCode": "def check_movie_results_selenium(movie_name):\n    # Encode the movie name for the URL\n    search_url = f\"{base_url}{urllib.parse.quote(movie_name)}?cid=0,1,3&tag=&label=%E7%94%B5%E5%BD%B1\"\n    print(f\"Checking: {search_url}\")\n    # Set up Selenium WebDriver\n    options = Options()\n    # options.headless = True  # Run in headless mode\n    driver = webdriver.Chrome(service=Service(local_chorme_driver_path), options=options)\n    try:\n        driver.get(search_url)",
        "detail": "src.iyf_search",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.iyf_search",
        "description": "src.iyf_search",
        "peekOfCode": "def main(input_file, output_file):\n    movies = read_movie_list(input_file)\n    if not movies:\n        return\n    with open(output_file, \"w\", encoding=\"utf-8\") as f:\n        for movie in movies:\n            is_valid = check_movie_results_selenium(movie)\n            result = f\"{movie}: {'Found' if is_valid else 'Not Found'}\"\n            print(result)\n            if is_valid:",
        "detail": "src.iyf_search",
        "documentation": {}
    },
    {
        "label": "base_url",
        "kind": 5,
        "importPath": "src.iyf_search",
        "description": "src.iyf_search",
        "peekOfCode": "base_url = \"https://www.iyf.tv/search/\"\nlocal_chorme_driver_path = \"/Users/mac/Downloads/chromedriver-mac-x64/chromedriver\"\n# Function to read movies from a file\ndef read_movie_list(file_path):\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            movies = [line.strip() for line in f if line.strip()]\n        return movies\n    except FileNotFoundError:\n        print(f\"Error: File '{file_path}' not found.\")",
        "detail": "src.iyf_search",
        "documentation": {}
    },
    {
        "label": "local_chorme_driver_path",
        "kind": 5,
        "importPath": "src.iyf_search",
        "description": "src.iyf_search",
        "peekOfCode": "local_chorme_driver_path = \"/Users/mac/Downloads/chromedriver-mac-x64/chromedriver\"\n# Function to read movies from a file\ndef read_movie_list(file_path):\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            movies = [line.strip() for line in f if line.strip()]\n        return movies\n    except FileNotFoundError:\n        print(f\"Error: File '{file_path}' not found.\")\n        return []",
        "detail": "src.iyf_search",
        "documentation": {}
    },
    {
        "label": "input_file",
        "kind": 5,
        "importPath": "src.iyf_search",
        "description": "src.iyf_search",
        "peekOfCode": "input_file = \"movies_list_stripped.txt\"\noutput_file = \"available.txt\"\nmain(input_file, output_file)\nprint(f\"Results saved to {output_file}\")",
        "detail": "src.iyf_search",
        "documentation": {}
    },
    {
        "label": "output_file",
        "kind": 5,
        "importPath": "src.iyf_search",
        "description": "src.iyf_search",
        "peekOfCode": "output_file = \"available.txt\"\nmain(input_file, output_file)\nprint(f\"Results saved to {output_file}\")",
        "detail": "src.iyf_search",
        "documentation": {}
    },
    {
        "label": "read_movie_list",
        "kind": 2,
        "importPath": "src.refine",
        "description": "src.refine",
        "peekOfCode": "def read_movie_list(file_path):\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            movies = [line.strip() for line in f if line.strip()]\n        return movies\n    except FileNotFoundError:\n        print(f\"Error: File '{file_path}' not found.\")\n        return []\n# Function to check if a movie has valid search results using Selenium\ndef check_movie_results_selenium(movie_name):",
        "detail": "src.refine",
        "documentation": {}
    },
    {
        "label": "check_movie_results_selenium",
        "kind": 2,
        "importPath": "src.refine",
        "description": "src.refine",
        "peekOfCode": "def check_movie_results_selenium(movie_name):\n    # Encode the movie name for the URL\n    search_url = f\"{base_url}{urllib.parse.quote(movie_name)}?cid=0,1,3&tag=&label=%E7%94%B5%E5%BD%B1\"\n    print(f\"Checking: {search_url}\")\n    # Set up Selenium WebDriver\n    options = Options()\n    # options.headless = True  # Run in headless mode\n    driver = webdriver.Chrome(service=Service(local_chorme_driver_path), options=options)\n    try:\n        driver.get(search_url)",
        "detail": "src.refine",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.refine",
        "description": "src.refine",
        "peekOfCode": "def main(input_file, output_file):\n    movies = read_movie_list(input_file)\n    if not movies:\n        return\n    with open(output_file, \"w\", encoding=\"utf-8\") as f:\n        for movie in movies:\n            is_valid = check_movie_results_selenium(movie)\n            result = f\"{movie}: {'Found' if is_valid else 'Not Found'}\"\n            print(result)\n            if is_valid:",
        "detail": "src.refine",
        "documentation": {}
    },
    {
        "label": "base_url",
        "kind": 5,
        "importPath": "src.refine",
        "description": "src.refine",
        "peekOfCode": "base_url = \"https://www.iyf.tv/search/\"\nlocal_chorme_driver_path = \"/Users/mac/Downloads/chromedriver-mac-x64/chromedriver\"\n# Function to read movies from a file\ndef read_movie_list(file_path):\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            movies = [line.strip() for line in f if line.strip()]\n        return movies\n    except FileNotFoundError:\n        print(f\"Error: File '{file_path}' not found.\")",
        "detail": "src.refine",
        "documentation": {}
    },
    {
        "label": "local_chorme_driver_path",
        "kind": 5,
        "importPath": "src.refine",
        "description": "src.refine",
        "peekOfCode": "local_chorme_driver_path = \"/Users/mac/Downloads/chromedriver-mac-x64/chromedriver\"\n# Function to read movies from a file\ndef read_movie_list(file_path):\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            movies = [line.strip() for line in f if line.strip()]\n        return movies\n    except FileNotFoundError:\n        print(f\"Error: File '{file_path}' not found.\")\n        return []",
        "detail": "src.refine",
        "documentation": {}
    },
    {
        "label": "input_file",
        "kind": 5,
        "importPath": "src.refine",
        "description": "src.refine",
        "peekOfCode": "input_file = \"movies_search_results.txt\"\noutput_file = \"available.txt\"\nmain(input_file, output_file)\nprint(f\"Results saved to {output_file}\")",
        "detail": "src.refine",
        "documentation": {}
    },
    {
        "label": "output_file",
        "kind": 5,
        "importPath": "src.refine",
        "description": "src.refine",
        "peekOfCode": "output_file = \"available.txt\"\nmain(input_file, output_file)\nprint(f\"Results saved to {output_file}\")",
        "detail": "src.refine",
        "documentation": {}
    }
]